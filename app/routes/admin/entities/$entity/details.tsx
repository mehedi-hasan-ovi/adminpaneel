import { Entity } from "@prisma/client";
import { ActionFunction, json, LoaderFunction, redirect } from "@remix-run/node";
import { useTypedLoaderData } from "remix-typedjson";
import Constants from "~/application/Constants";
import EntityForm from "~/components/entities/EntityForm";
import { i18nHelper } from "~/locale/i18n.utils";
import { updateEntity, getEntityBySlug, getEntityById } from "~/utils/db/entities/entities.db.server";
import { createEntityPermissions, deleteEntityPermissions } from "~/utils/db/permissions/permissions.db.server";
import EntityHelper from "~/utils/helpers/EntityHelper";

type LoaderData = {
  item: Entity;
};
export let loader: LoaderFunction = async ({ params }) => {
  const item = await getEntityBySlug({ tenantId: null, slug: params.entity ?? "" });
  if (!item) {
    return redirect("/admin/entities");
  }

  const data: LoaderData = {
    item,
  };
  return json(data);
};

export const action: ActionFunction = async ({ request, params }) => {
  const { t } = await i18nHelper(request);

  const item = await getEntityBySlug({ tenantId: null, slug: params.entity ?? "" });
  if (!item) {
    return redirect("/admin/entities");
  }

  const form = await request.formData();
  const action = form.get("action")?.toString() ?? "";
  if (action === "edit") {
    const name = form.get("name")?.toString() ?? "";
    const slug = form.get("slug")?.toString().toLowerCase() ?? "";
    const order = Number(form.get("order"));
    const prefix = form.get("prefix")?.toString() ?? "";
    const title = form.get("title")?.toString() ?? "";
    const titlePlural = form.get("title-plural")?.toString() ?? "";
    const isAutogenerated = Boolean(form.get("is-autogenerated"));
    const hasApi = Boolean(form.get("has-api"));
    const icon = form.get("icon")?.toString() ?? "";
    const active = Boolean(form.get("active"));
    const type = form.get("type")?.toString() ?? "";

    const showInSidebar = Boolean(form.get("show-in-sidebar"));
    const hasTags = Boolean(form.get("has-tags"));
    const hasComments = Boolean(form.get("has-comments"));
    const hasTasks = Boolean(form.get("has-tasks"));
    const hasWorkflow = Boolean(form.get("has-workflow"));
    const hasActivity = Boolean(form.get("has-activity"));
    const hasBulkDelete = Boolean(form.get("has-bulk-delete"));

    const defaultVisibility = form.get("default-visibility")?.toString() ?? Constants.DEFAULT_ROW_VISIBILITY;

    const onCreated = form.get("onCreated")?.toString() ?? "redirectToOverview";
    const onEdit = form.get("onEdit")?.toString() ?? "editRoute";

    const errors = await EntityHelper.validateEntity({ tenantId: null, name, slug, order, prefix, entity: item });
    if (errors.length > 0) {
      return json({ error: errors.join(", ") }, { status: 400 });
    }

    try {
      await updateEntity(item.id ?? "", {
        name,
        slug,
        order,
        prefix,
        title,
        titlePlural,
        isAutogenerated,
        hasApi,
        icon,
        active,
        type,
        showInSidebar,
        hasTags,
        hasComments,
        hasTasks,
        hasWorkflow,
        hasActivity,
        hasBulkDelete,
        defaultVisibility,
        onCreated,
        onEdit,
      });
      await deleteEntityPermissions(item);
      const updatedEntity = await getEntityById({ tenantId: null, id: item.id });
      if (updatedEntity) {
        await createEntityPermissions(updatedEntity);
      }

      return redirect("/admin/entities");
    } catch (error: any) {
      return json({ error: error.message }, { status: 400 });
    }
  } else {
    return json({ error: t("shared.invalidForm") }, { status: 400 });
  }
};

export default function EditEntityIndexRoute() {
  const data = useTypedLoaderData<LoaderData>();
  return <EntityForm item={data.item} />;
}
